// Generated by gencpp from file duckietown_kaku/gripper_modeGoal.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_KAKU_MESSAGE_GRIPPER_MODEGOAL_H
#define DUCKIETOWN_KAKU_MESSAGE_GRIPPER_MODEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace duckietown_kaku
{
template <class ContainerAllocator>
struct gripper_modeGoal_
{
  typedef gripper_modeGoal_<ContainerAllocator> Type;

  gripper_modeGoal_()
    : object_point()  {
    }
  gripper_modeGoal_(const ContainerAllocator& _alloc)
    : object_point(_alloc)  {
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _object_point_type;
  _object_point_type object_point;




  typedef boost::shared_ptr< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> const> ConstPtr;

}; // struct gripper_modeGoal_

typedef ::duckietown_kaku::gripper_modeGoal_<std::allocator<void> > gripper_modeGoal;

typedef boost::shared_ptr< ::duckietown_kaku::gripper_modeGoal > gripper_modeGoalPtr;
typedef boost::shared_ptr< ::duckietown_kaku::gripper_modeGoal const> gripper_modeGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace duckietown_kaku

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'duckietown_kaku': ['/home/ubuntu/duckietown/catkin_ws/devel/share/duckietown_kaku/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b6fe603b1bb4c161f7386b63ba5c0ae";
  }

  static const char* value(const ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b6fe603b1bb4c16ULL;
  static const uint64_t static_value2 = 0x1f7386b63ba5c0aeULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_kaku/gripper_modeGoal";
  }

  static const char* value(const ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
geometry_msgs/Point object_point \n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct gripper_modeGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_kaku::gripper_modeGoal_<ContainerAllocator>& v)
  {
    s << indent << "object_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.object_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_KAKU_MESSAGE_GRIPPER_MODEGOAL_H
