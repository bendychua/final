# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ground_projection/GetGroundCoordRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import duckietown_msgs.msg

class GetGroundCoordRequest(genpy.Message):
  _md5sum = "7e079b9787496ba75117334836e96c45"
  _type = "ground_projection/GetGroundCoordRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

duckietown_msgs/Vector2D normalized_uv

================================================================================
MSG: duckietown_msgs/Vector2D
float32 x
float32 y

"""
  __slots__ = ['normalized_uv']
  _slot_types = ['duckietown_msgs/Vector2D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       normalized_uv

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetGroundCoordRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.normalized_uv is None:
        self.normalized_uv = duckietown_msgs.msg.Vector2D()
    else:
      self.normalized_uv = duckietown_msgs.msg.Vector2D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.normalized_uv.x, _x.normalized_uv.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.normalized_uv is None:
        self.normalized_uv = duckietown_msgs.msg.Vector2D()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.normalized_uv.x, _x.normalized_uv.y,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.normalized_uv.x, _x.normalized_uv.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.normalized_uv is None:
        self.normalized_uv = duckietown_msgs.msg.Vector2D()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.normalized_uv.x, _x.normalized_uv.y,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ground_projection/GetGroundCoordResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GetGroundCoordResponse(genpy.Message):
  _md5sum = "cb06b1906fc6f1f5910a7d2012f835c0"
  _type = "ground_projection/GetGroundCoordResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Point gp


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['gp']
  _slot_types = ['geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetGroundCoordResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gp is None:
        self.gp = geometry_msgs.msg.Point()
    else:
      self.gp = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.gp.x, _x.gp.y, _x.gp.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.gp is None:
        self.gp = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.gp.x, _x.gp.y, _x.gp.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.gp.x, _x.gp.y, _x.gp.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.gp is None:
        self.gp = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.gp.x, _x.gp.y, _x.gp.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
class GetGroundCoord(object):
  _type          = 'ground_projection/GetGroundCoord'
  _md5sum = '556869c22d708d07f00608b52f833756'
  _request_class  = GetGroundCoordRequest
  _response_class = GetGroundCoordResponse
